@page "/ConsumptionPlanning"
@using IoTControllerContracts
@using SmartPowerHub.Data
@inject DeviceService<IAppliance> ApplianceService
@inject PlanningService planningService
@inject ISnackbar Snackbar

<PageTitle>Consumption Planning</PageTitle>

@if (_appliances == null)
{
    <MudContainer Style="display: flex; justify-content: center; align-items: center; height: 90vh;">
        <div>
            <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true"/>
        </div>
    </MudContainer>

}
else
{
    <MudText Align="Align.Center" Color="Color.Primary" Typo="Typo.h2" Class="m-4"> Consumption Planning </MudText>
    <MudDropContainer T="DisplayableProgram" Items="_items" ItemIsDisabled="@(item => item.IdDisabled)" ItemsSelector="@((item, dropzone) => item.Selector == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
        <ChildContent>
            <MudGrid Class="p-4">
                <MudItem xs="12">
                    <MudChart ChartType="ChartType.Bar" ChartSeries="@_chartData" XAxisLabels="@_chartLabels" Width="100%" Height="350px"></MudChart>
                </MudItem>
                <MudItem xs="12">
                    <MudDropZone T="DisplayableProgram" Identifier="PlannerZone" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                        <MudText Typo="Typo.h6" Class="mb-4">Here drop the programs you want to plan.</MudText>
                    </MudDropZone>
                </MudItem>
                <MudItem xs="12">
                    <MudExpansionPanels>
                        @foreach (var appliance in _appliances)
                        {
                            <MudExpansionPanel Text="@appliance.Appliance.Name">
                                @appliance.Appliance.Description
                                <MudDropZone T="DisplayableProgram" Identifier="@appliance.DropZoneId" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1"></MudDropZone>
                            </MudExpansionPanel>
                        }
                    </MudExpansionPanels>
                </MudItem>
            </MudGrid>
        </ChildContent>
        <ItemRenderer>
            <MudPaper Elevation="25" Class="pa-4 my-4">
                Program: @context.Program.Name, Power Consumption: @context.Program.PowerConsumptionInWattHours Wh, Run Time: @context.Program.RunTimeInMinutes min, Status: @context.Status
            </MudPaper>
        </ItemRenderer>
    </MudDropContainer>
}

@code {
    DisplayableAppliance[]? _appliances;
    List<DisplayableProgram> _items = [];
    readonly List<ChartSeries> _chartData = [];
    string[]? _chartLabels;


    protected override void OnInitialized()
    {
        _ = LoadData();
    }

    private async Task LoadData()
    {
        var appliances = await Task.Run(() => ApplianceService.GetDevicesAsync());
        _appliances = appliances.Select(a => new DisplayableAppliance(a, this)).ToArray();
        Task.WaitAll(_appliances.Select(a => a.LoadPrograms()).ToArray());

        var plan = await planningService.GetPlan();
        var series = new ChartSeries
        {
            Name = "Predicted Power Production",
            Data = plan.TimeSlots.Select(t => t.PowerCapacity).ToArray()
        };
        _chartData.Add(series);

        _chartLabels = new string[plan.TimeSlots.Length];

        for (var i = 0; i < plan.TimeSlots.Length; i++)
            _chartLabels[i] = (plan.StartTime + TimeSpan.FromMinutes(i * plan.TimeSlotLength)).ToString("HH");



        StateHasChanged();
    }

    class DisplayableAppliance
    {
        private readonly ConsumptionPlanning _co;
        public IAppliance Appliance { get; }
        public DisplayableProgram[] Programs { get; set; }
        public string DropZoneId => "Drop zone: " + Appliance.Id;

        public DisplayableAppliance(IAppliance appliance, ConsumptionPlanning co)
        {
            _co = co;
            Appliance = appliance;
        }

        public async Task LoadPrograms()
        {
            var programs = await Appliance.GetProgramsAsync();
            Programs = programs.Select(p => new DisplayableProgram(p, DropZoneId, this)).ToArray();
            foreach (var displayableProgram in Programs)
            {
                await displayableProgram.LoadState();
            }
            _co._items.AddRange(Programs);
        }

        public void SelectedItemChange(HashSet<DisplayableProgram> selectedItems)
        {
            _co.Snackbar.Add($"Selected programs: {string.Join(", ", selectedItems.Select(p => p.Program.Name))}");
        }

        public void RefreshEnabledPrograms()
        {
            bool hasPlannedProgram = false;
            foreach (var program in Programs)
            {
                program.IdDisabled = false;
                if (program.Selector != DropZoneId)
                    hasPlannedProgram = true;
            }

            if (!hasPlannedProgram)
                return;

            foreach (var program in Programs)
            {
                program.IdDisabled = program.Selector == DropZoneId;
            }
        }
    }

    private void ItemUpdated(MudItemDropInfo<DisplayableProgram> dropItem)
    {
        dropItem.Item.Selector = dropItem.DropzoneIdentifier;
        dropItem.Item.DP.RefreshEnabledPrograms();
    }

    private 

    class DisplayableProgram
    {
        public IProgram Program { get; }
        public string Status { get; set; }
        public string Selector { get; set; }
        public DisplayableAppliance DP { get; }
        public bool IdDisabled { get; set; }

        public DisplayableProgram(IProgram program, string selector, DisplayableAppliance dp)
        {
            Program = program;
            Selector = selector;
            DP = dp;
        }

        public async Task LoadState()
        {
            var status = await Program.GetStatusAsync();
            Status = status.ToString();
        }
    }

}
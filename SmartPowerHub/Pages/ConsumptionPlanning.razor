@page "/ConsumptionPlanning"
@using IoTControllerContracts
@using SmartPowerHub.Data
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject DeviceService<IAppliance> ApplianceService
@inject PlanningService planningService
@inject ISnackbar Snackbar

<PageTitle>Consumption Planning</PageTitle>

@if (_appliances == null)
{
    <MudContainer Style="display: flex; justify-content: center; align-items: center; height: 90vh;">
        <div>
            <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true"/>
        </div>
    </MudContainer>
}
else
{
    <MudText Align="Align.Center" Color="Color.Primary" Typo="Typo.h2" Class="m-4"> Consumption Planning </MudText>
    <MudDropContainer @ref="_dropContainer" T="DisplayableProgram" Items="_displayedPrograms" ItemDisabled="@((item) => item.IsDisabled)" ItemsSelector="@((item, dropzone) => item.Selector == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
        <ChildContent>
            <MudGrid Class="p-4">
                <MudItem xs="12">
                    @if (!_chartData.Any())
                    {
                        <MudText Typo="Typo.h4" Class="mb-4">No production plan available yet.</MudText>
                        <MudText Typo="Typo.h6" Class="mb-4">You must plan your appliances in order to generate plan.</MudText>
                    }
                    else
                    {
                        <MudChart ChartType="ChartType.Bar" ChartSeries="@_chartData" XAxisLabels="@_chartLabels" Width="100%" Height="350px"></MudChart>
                    }
                </MudItem>
                <MudItem xs="12">
                    <MudDropZone T="DisplayableProgram" Identifier="@_readyZone" CanDrop="@((_) => false)" Class="rounded mud-background-gray border-2 border-solid mud-border-lines-default pa-6 ma-4 flex-grow-1">
                        <MudText Typo="Typo.h6" Class="mb-4">Here will appear scheduled programs.</MudText>
                    </MudDropZone>
                </MudItem>
                <MudItem xs="12">
                    <MudDropZone T="DisplayableProgram" Identifier="@_plannerZone" Class="rounded mud-background-gray border-2 border-solid mud-border-lines-default pa-6 ma-4 flex-grow-1">
                        <MudText Typo="Typo.h6" Class="mb-4">Here drop the programs you want to plan.</MudText>
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="RemoveAllFromPlanning">Remove All</MudButton>
                        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="TogglePlanSetUpDialog">Plan</MudButton>
                    </MudDropZone>
                </MudItem>
                <MudItem xs="12">
                    <MudExpansionPanels>
                        @foreach (var appliance in _appliances)
                        {
                            <MudExpansionPanel>
                                <TitleContent>
                                    <div class="d-flex">
                                        <MudIcon Icon="@Icons.Material.Filled.DevicesOther" Style="margin-right: 8px;"></MudIcon>
                                        <MudText Typo="Typo.h6" Color="Color.Primary"> @appliance.Appliance.Name</MudText>
                                    </div>
                                </TitleContent>
                                <ChildContent>
                                    <div class="p-3">
                                        <MudText Typo="Typo.body1" Color="Color.Primary">@appliance.Appliance.Description</MudText>
                                        <MudText Typo="Typo.h6" Color="Color.Primary">Available Programs:</MudText>
                                        <MudDropZone T="DisplayableProgram" Identifier="@appliance.DropZoneId" Class="rounded border-2 border-solid mud-border-lines-default mud-background-gray pa-4 ma-4 flex-grow-1" CanDrop="@((item) => item.DP == appliance)"></MudDropZone>
                                    </div>
                                </ChildContent>
                            </MudExpansionPanel>
                        }
                    </MudExpansionPanels>
                </MudItem>
            </MudGrid>
        </ChildContent>
        <ItemRenderer>
            <MudPaper Elevation="25" Class="pa-4 my-4 b card-hover-effect">
                <MudGrid Class="align-items-center">
                    <MudItem xs="6" sm="2">
                        <MudText Typo="Typo.subtitle1" Style="color: white">Program:</MudText>
                        <MudText Typo="Typo.body1" Style="color: black">@context.Program.Name</MudText>
                    </MudItem>
                    <MudItem xs="6" sm="2">
                        <MudText Typo="Typo.subtitle1" Style="color: white">Power Consumption:</MudText>
                        <MudText Typo="Typo.body1" Style="color: black">@context.Program.PowerConsumptionInWattHours Wh</MudText>
                    </MudItem>
                    <MudItem xs="6" sm="2">
                        <MudText Typo="Typo.subtitle1" Style="color: white">Run Time:</MudText>
                        <MudText Typo="Typo.body1" Style="color: black">@context.Program.RunTimeInMinutes min</MudText>
                    </MudItem>
                    <MudItem xs="6" sm="2">
                        <MudText Typo="Typo.subtitle1" Style="color: white">Status:</MudText>
                        <MudText Typo="Typo.body1" Color="context.GetColor()">
                            <b>@context.Status</b>
                        </MudText>
                    </MudItem>
                    <MudItem xs="6" sm="2">
                        <MudText Typo="Typo.subtitle1" Style="color: white">Scheduled Start Time:</MudText>
                        <MudText Typo="Typo.body1" Style="color: black">@context.GetPlannedStartTime()</MudText>
                    </MudItem>
                    <MudItem xs="6" sm="2">
                        <MudButton Variant="Variant.Filled" Color="@context.ButtonColor()" Disabled="@context.IsDisabled" @onclick="context.SwitchDropZone">@context.ButtonText()</MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </ItemRenderer>
    </MudDropContainer>

    <MudDialog @bind-Visible="IsPlanSetUpDialogVisible">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Settings" Class="mr-3 mb-n1" />
                Plan Setup
            </MudText>
        </TitleContent>
        <DialogContent>
            <EditForm Model="@_planSetupModel" OnValidSubmit="SendPlanSetup">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardContent>
                        <MudSelect T="string" Label="Plan Type" AnchorOrigin="Origin.BottomCenter"
                                   HelperText="Select the type of plan you want to plan your appliances for!"
                                   @bind-Value="_planSetupModel.PlanType" For="@(() => _planSetupModel.PlanType)">
                            <MudSelectItem Value="@("Normal Solar Plan")" />
                            <MudSelectItem Value="@("Cloudiness Solar Plan")" />
                        </MudSelect>
                        <MudTextField T="DateTime" Format="s" Label="Start Time" InputType="InputType.DateTimeLocal"
                                      HelperText="Must be within 48 hours from now!"
                                      @bind-Value="_planSetupModel.StartTime" For="@(() => _planSetupModel.StartTime)" />
                        <MudTextField T="int" Label="Plan Duration (Hours)" InputType="InputType.Number"
                                      HelperText="Start time + duration must be within 48 hours from now!"
                                      @bind-Value="_planSetupModel.PlanDuration" For="@(() => _planSetupModel.PlanDuration)" />
                        @if (_planSetupModel.PlanType == "Cloudiness Solar Plan")
                        {
                            <MudTextField T="string" Label="OpenWeatherToken"
                                          HelperText="Enter your OpenWeather API token here!"
                                          @bind-Value="_planSetupModel.OpenWeatherToken" For="@(() => _planSetupModel.OpenWeatherToken)" />
                        }
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton OnClick="TogglePlanSetUpDialog">Cancel</MudButton>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Confirm</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
        </DialogContent>
    </MudDialog>
    <MudDialog @bind-Visible="IsLoadingVisible" OnBackdropClick="() => {}">
        <TitleContent>
            <MudText Typo="Typo.h6">
                Loading...
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true"/>
        </DialogContent>
    </MudDialog>
}